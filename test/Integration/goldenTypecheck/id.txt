[
    (
        (
            [ /operator!= ( Value /l -> TVVar /T = Hole TVVar /T HoleActive Nothing ) ( Value /r -> TVVar /T = Hole TVVar /T HoleActive Nothing ) [ /T : ∀/Data/Algebra/Eq ] -> ∀/Data/Primitive/Boolean
            , Value /Data/Algebra/LessThan
            , Value /Data/Algebra/Equal
            , Value /Data/Algebra/GreaterThan
            , Value /Data/Algebra/NoOrdering
            , /Data/Algebra/compare [ /T : ∀/Data/Algebra/Ord ] ( Value /l -> TVVar /T ) ( Value /r -> TVVar /T ) -> ∀/Data/Algebra/Ordering
            , /Data/Algebra/compare [ /T : ∀/Data/Algebra/POrd ] ( Value /l -> TVVar /T ) ( Value /r -> TVVar /T ) -> ∀/Data/Algebra/POrdering
            , /operator<= ( Value /l -> TVVar /T = Hole TVVar /T HoleActive Nothing ) ( Value /r -> TVVar /T = Hole TVVar /T HoleActive Nothing ) [ /T : ∀/Data/Algebra/Ord ] -> ∀/Data/Primitive/Boolean
            , /operator>= ( Value /l -> TVVar /T = Hole TVVar /T HoleActive Nothing ) ( Value /r -> TVVar /T = Hole TVVar /T HoleActive Nothing ) [ /T : ∀/Data/Algebra/Ord ] -> ∀/Data/Primitive/Boolean
            , /operator< ( Value /l -> TVVar /T = Hole TVVar /T HoleActive Nothing ) ( Value /r -> TVVar /T = Hole TVVar /T HoleActive Nothing ) [ /T : ∀/Data/Algebra/Ord ] -> ∀/Data/Primitive/Boolean
            , /operator> ( Value /l -> TVVar /T = Hole TVVar /T HoleActive Nothing ) ( Value /r -> TVVar /T = Hole TVVar /T HoleActive Nothing ) [ /T : ∀/Data/Algebra/Ord ] -> ∀/Data/Primitive/Boolean
            , /operator++ ( Value /l -> TVVar /T = Hole TVVar /T HoleActive Nothing ) ( Value /r -> TVVar /T = Hole TVVar /T HoleActive Nothing ) [ /T : ∀/Data/Algebra/Semigroup ] -> TVVar /T
            , /Data/Algebra/testSemigroupAssociative [ /T : ∀/Data/Algebra/Semigroup ] ( Value /a -> TVVar /T ) ( Value /b -> TVVar /T ) ( Value /c -> TVVar /T ) -> /Data/Primitive/Integer = CInt 0
            , /Data/Algebra/mempty [ /T : ∀/Data/Algebra/Monoid ] -> TVVar /T
            , /Data/Algebra/testRightMonoidIdentity [ /T : ∀/Data/Algebra/Monoid ] ( Value /t -> TVVar /T ) -> /Data/Primitive/Integer = CInt 0
            , /Data/Algebra/testLeftMonoidIdentity [ /T : ∀/Data/Algebra/Monoid ] ( Value /t -> TVVar /T ) -> /Data/Primitive/Integer = CInt 0
            , /Data/Algebra/testCommutativeMonoid [ /T : ∀/Data/Algebra/CommutativeMonoid ] ( Value /a -> TVVar /T ) ( Value /b -> TVVar /T ) -> /Data/Primitive/Integer = CInt 0
            , /Data/Algebra/inverse [ /T : ∀/Data/Algebra/Group ] ( Value /t -> TVVar /T ) -> TVVar /T
            , /Data/Algebra/testGroup [ /T : ∀/Data/Algebra/Group ] ( Value /t -> TVVar /T ) -> /Data/Primitive/Integer = CInt 0
            ]
        ,
            [ CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGClass
                ( False
                , /Data/Algebra/CommutativeMonoid
                , []
                , Just "The [CommutativeMonoid] builds on top of the [Monoid].
                  It is also called an Abelian Monoid
                  Here, integers with addition are a [CommutativeMonoid], but [String]s are not."
                )
            , CGClass
                ( False
                , /Data/Algebra/Eq
                ,
                    [ ∀/Data/Algebra/POrd
                    , ∀/Data/Algebra/Semigroup
                    ]
                , Just "The Eq class is used to define values which can be compared for equality.
                  While naive tuple equality often works, some types have equality that behaves differently and must be defined.
                  For example, a TreeSet can insert items in different order and produce different trees, but with equal sets.
                  There are only two operations for eq: [operator==] and [operator!=]./operator==</Data/Algebra/Eq $T>($T l, $T r) -> BooleanThis checks whether two items are equal.
                  Note that it only compares like items with each other, not that you can compare apples to oranges. If something can be compared for order, it should also be comparable for equality by the following relationship: "
                )
            , CGClass
                ( False
                , /Data/Algebra/Group
                , []
                , Just "The [Group] builds on top of the [Monoid] (not necessarily the [CommutativeMonoid]).
                  It adds an inverse operation that finds the opposite of an element.
                  For integers with addition, negation with [operator~] would be the inverse.
                  Something like [String]s would not have an inverse, so it wouldn't be a [Group]."
                )
            , CGClass
                ( False
                , /Data/Algebra/Monoid
                ,
                    [ ∀/Data/Algebra/CommutativeMonoid
                    , ∀/Data/Algebra/Group
                    ]
                , Just "The [Monoid] builds on top of the [Semigroup].
                  It adds the identity value [mempty].
                  The integers with addition form a [Monoid], and 0 is the value for [mempty].
                  Another example is [String] where "" is the value for [mempty]  "
                )
            , CGClass
                ( False
                , /Data/Algebra/Ord
                , [ ∀/Data/Primitive/Number ]
                , Just "Ord is used to define types which can be strictly ordered.
                  Every element, when compared must have one of the following [Ordering] relationships: "
                )
            , CGClass
                ( True
                , /Data/Algebra/Ordering
                ,
                    [ /Data/Algebra/LessThan
                    , /Data/Algebra/Equal
                    , /Data/Algebra/GreaterThan
                    ]
                , Just "The Orderings can relate any like items of Ord. "
                )
            , CGClass
                ( False
                , /Data/Algebra/POrd
                , [ ∀/Data/Algebra/Ord ]
                , Just "In addition to [Ord], [POrd] defines a partial ordering.
                  Partially ordered items can be compared, but may result in [NoOrdering]: "
                )
            , CGClass
                ( True
                , /Data/Algebra/POrdering
                ,
                    [ ∀/Data/Algebra/Ordering
                    , /Data/Algebra/NoOrdering
                    ]
                , Just "As an example, sets can be partially ordered by the subset operation.
                  One set A <= B when A is a subset of B.
                  An ordered example is {1} <= {1, 2}.
                  But, two sets like {1} and {2} have no ordering between them."
                )
            , CGClass
                ( False
                , /Data/Algebra/Semigroup
                , [ ∀/Data/Algebra/Monoid ]
                , Just "A semigroup is a type combined with an associative operation called [operator++].
                  For example, integers with the addition operation are a semigroup. "
                )
            ]
        ,
            [ /Catln/#md
                ( Value /text -> /Data/String = CStr "# Catln Core Abstract Algebra Types
                These types define some of the basic relationship between types and ways classes can relate to themselves." )
            , /Catln/#md
                ( Value /text -> /Data/String = CStr "The Eq class is used to define values which can be compared for equality.
                While naive tuple equality often works, some types have equality that behaves differently and must be defined.
                For example, a TreeSet can insert items in different order and produce different trees, but with equal sets.
                There are only two operations for eq: [operator==] and [operator!=]." )
            , /Catln/#md
                ( Value /text -> /Data/String = CStr "/operator==</Data/Algebra/Eq $T>($T l, $T r) -> Boolean" )
            , /Catln/#md
                ( Value /text -> /Data/String = CStr "This checks whether two items are equal.
                Note that it only compares like items with each other, not that you can compare apples to oranges." )
            , /Catln/#md
                ( Value /text -> /Data/String = CStr "It is the opposite of [operator==] leading to the simple definition:" )
            , /Catln/#md
                ( Value /text -> /Data/String = CStr "/operator!=(l, r) = ~(l == r)
                Given this, creating an instance of Eq only requires defining equality and the != can be produced automatically." )
            , /Catln/#md
                ( Value /text -> /Data/String = CStr "## Ordering" )
            , /Catln/#md
                ( Value /text -> /Data/String = CStr "Ordering is used to define operations that have a natural ability to be ordered or sorted.
                Some examples include numbers which are sorted from smallest to largest or strings which are sorted alphabetically." )
            , /Catln/#md
                ( Value /text -> /Data/String = CStr "There are two different forms of ordering:" )
            , /Catln/#md
                ( Value /text -> /Data/String = CStr "Ord is used to define types which can be strictly ordered.
                Every element, when compared must have one of the following [Ordering] relationships:" )
            , /Catln/#md
                ( Value /text -> /Data/String = CStr "The Orderings can relate any like items of Ord. " )
            , /Catln/#md
                ( Value /text -> /Data/String = CStr "In addition to [Ord], [POrd] defines a partial ordering.
                Partially ordered items can be compared, but may result in [NoOrdering]:" )
            , /Catln/#md
                ( Value /text -> /Data/String = CStr "As an example, sets can be partially ordered by the subset operation.
                One set A <= B when A is a subset of B.
                An ordered example is {1} <= {1, 2}.
                But, two sets like {1} and {2} have no ordering between them." )
            , /Catln/#md
                ( Value /text -> /Data/String = CStr "There are a few nice properties about ordering." )
            , /Catln/#md
                ( Value /text -> /Data/String = CStr "This means that something fully ordered can still take advantage of many of the same functions as partially ordered ones.
                It just usually has a more specific result." )
            , /Catln/#md
                ( Value /text -> /Data/String = CStr "The only major function for ordering is [compare].
                Comparing two [Ord] will result in an [Ordering].
                Likewise, comparing two partially orderables [POrd] results in a [POrdering]." )
            , /Catln/#md
                ( Value /text -> /Data/String = CStr "### Operators for ordering
                Besides compare, there are also some operators to make using ordering easier." )
            , /Catln/#md
                ( Value /text -> /Data/String = CStr "If something can be compared for order, it should also be comparable for equality by the following relationship:" )
            , /Catln/#md
                ( Value /text -> /Data/String = CStr "/operator==<POrd $T>($T l, $T r) = compare(l=l, r=r) == Equal" )
            , /Catln/#md
                ( Value /text -> /Data/String = CStr "### Ordering utility functions" )
            , /Catln/#md
                ( Value /text -> /Data/String = CStr "max<Ord $T>($T l, $T r) -> $T = if l >= r then l else r" )
            , /Catln/#md
                ( Value /text -> /Data/String = CStr "min<Ord $T>($T l, $T r) -> $T = if l <= r then l else r" )
            , /Catln/#md
                ( Value /text -> /Data/String = CStr "TODO: Tests and properties for compare" )
            , /Catln/#md
                ( Value /text -> /Data/String = CStr "## Semigroup" )
            , /Catln/#md
                ( Value /text -> /Data/String = CStr "A semigroup is a type combined with an associative operation called [operator++].
                For example, integers with the addition operation are a semigroup." )
            , /Catln/#md
                ( Value /text -> /Data/String = CStr "The [Monoid] builds on top of the [Semigroup].
                It adds the identity value [mempty].
                The integers with addition form a [Monoid], and 0 is the value for [mempty].
                Another example is [String] where "" is the value for [mempty]" )
            , /Catln/#md
                ( Value /text -> /Data/String = CStr "We can test to verify that [mempty] works with both the left and right." )
            , /Catln/#md
                ( Value /text -> /Data/String = CStr "mconcat<Monoid $T>(List<$T> lst) = lst.fold(operator++, mempty)" )
            , /Catln/#md
                ( Value /text -> /Data/String = CStr "Using the [Monoid], it is possible to combine a list of monoids together." )
            , /Catln/#md
                ( Value /text -> /Data/String = CStr "The [CommutativeMonoid] builds on top of the [Monoid].
                It is also called an Abelian Monoid
                Here, integers with addition are a [CommutativeMonoid], but [String]s are not." )
            , /Catln/#md
                ( Value /text -> /Data/String = CStr "We can test to ensure that all [CommutativeMonoid]s satisfy the commutativity requirement." )
            , /Catln/#md
                ( Value /text -> /Data/String = CStr "The [Group] builds on top of the [Monoid] (not necessarily the [CommutativeMonoid]).
                It adds an inverse operation that finds the opposite of an element.
                For integers with addition, negation with [operator~] would be the inverse.
                Something like [String]s would not have an inverse, so it wouldn't be a [Group]." )
            ]
        )
    , ct
        ( CStr "/repo/dir/stack/core/algebra.ct" )
    ,
        [ ct
            ( CStr "/repo/dir/stack/core/primitives.ct" )
        , ct
            ( CStr "/repo/dir/stack/core/compile.ct" )
        ]
    )
,
    (
        (
            [ Value /Catln/IO
            , /Catln/exit ( Value /val -> /Data/Primitive/Integer ) ( Value /this -> /Catln/IO ) -> /Catln/IO
            , /Catln/println ( Value /msg -> /Data/String ) ( Value /this -> /Catln/IO ) -> /Catln/IO
            , /Catln/#md ( Value /text -> /Data/String )
            , /Catln/#name ( Value /name -> /Data/String )
            , Value /Catln/#else
            , /Catln/#runtime ( Value /k -> /Data/String )
            , Value /Catln/#argStart
            , Value /Catln/#argEnd
            , /Catln/#assert ( Value /test -> ∀/Data/Primitive/Boolean )
            , /Catln/#assert ( Value /test -> ∀/Data/Primitive/Boolean ) ( Value /msg -> /Data/String )
            , /Catln/#print ( Value /p -> ∀/Catln/Doc/DShow )
            , Value /Catln/#test
            , Value /Catln/#example
            , /operator?-> ( Value /l= Hole TopType HoleActive Nothing ) ( Value /r= Hole TopType HoleActive Nothing ) -> ∀/Data/Primitive/Boolean
            , /Catln/CatlnResult ( Value /name -> /Data/String ) ( Value /contents -> /Data/String )
            , /Catln/www ( Value /html -> /Data/String ) -> /Catln/CatlnResult
                ( /name=/Data/String
                , /contents=/Data/String
                ) = /Catln/CatlnResult
                ( Value /name -> /Data/String = CStr "index.html" ) ( Value /contents -> TVArg /html = Value /html )
            , /Catln/llvm ( Value /c ) -> /Catln/CatlnResult..
            , Value /Catln/Then
            , Value /Catln/Else
            , /Catln/ThenElse/fromBool ( Value /v -> ∀/Data/Primitive/Boolean ) -> ∀/Catln/ThenElse
            , /Catln/ThenElse/fromBool ( Value /v -> /Data/Primitive/True = Value /Data/Primitive/True ) -> /Catln/Then = Value /Catln/Then
            , /Catln/ThenElse/fromBool ( Value /v -> /Data/Primitive/False = Value /Data/Primitive/False ) -> /Catln/Else = Value /Catln/Else
            ]
        ,
            [ CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGClass
                ( True
                , /Catln/ThenElse
                ,
                    [ /Catln/Then
                    , /Catln/Else
                    ]
                , Just ""
                )
            ]
        ,
            [ /Catln/#md
                ( Value /text -> /Data/String = CStr "# Catln Core Compiling Types and Annotations" )
            , /Catln/#md
                ( Value /text -> /Data/String = CStr "## IO" )
            , /Catln/#md
                ( Value /text -> /Data/String = CStr "## Core Annotations
                The core annotations are all of the annotations used by the compiler and the web docs program." )
            , /Catln/#md
                ( Value /text -> /Data/String = CStr "## Build-in Type Macros" )
            , /Catln/#md
                ( Value /text -> /Data/String = CStr "## Result Classes" )
            ]
        )
    , ct
        ( CStr "/repo/dir/stack/core/compile.ct" )
    ,
        [ ct
            ( CStr "/repo/dir/stack/core/primitives.ct" )
        , ct
            ( CStr "/repo/dir/stack/core/data.ct" )
        , ct
            ( CStr "/repo/dir/stack/core/webdoc.ct" )
        ]
    )
,
    (
        (
            [ Value /Data/String
            , /operator== ( Value /l -> /Data/String = Hole /Data/String HoleActive Nothing ) ( Value /r -> /Data/String = Hole /Data/String HoleActive Nothing ) -> ∀/Data/Primitive/Boolean
            , /Data/toString ( Value /this -> /Data/String ) -> /Data/String
            , /Data/toString ( Value /this -> /Data/String ) -> TVArg /this = Value /this
            , /Data/toString ( Value /this -> /Data/Primitive/Integer ) -> /Data/String
            , /Context [ /V : TopType ] ( Value /value -> TVVar /V ) ( ..Hole TopType HoleActive Nothing )
            , /ContextIn [ /V : TopType ] ( Value /value -> TVVar /V ) ( ..Hole TopType HoleActive Nothing )
            , /ContextOut [ /V : TopType ] ( Value /value -> TVVar /V ) ( ..Hole TopType HoleActive Nothing )
            , /Context [ /T : TopType ] [ /V : TopType ] ( Value /value -> TVVar /V ) ( ..Hole TopType HoleActive Nothing ) | /operator?->
                ( Value /l -> /ContextIn [ /V=TopType ] ( /value=TopType ) .. = /ContextIn [ /V : TVVar /V ] ( Value /value -> TVVar /V = Hole TVVar /V HoleActive Nothing ) ( ..Hole TopType HoleActive Nothing ) ) ( Value /r -> TVVar /T = Hole TVVar /T HoleActive Nothing ) -> TVVar /T
            , Value /Data/None
            , /Data/Cons [ /T : TopType ] ( Value /head -> TVVar /T ) ( Value /tail -> ∀/Data/ConsList )
            , Value /Data/Nil
            , /Data/length ( Value /this -> /Data/Nil ) -> /Data/Primitive/Integer = CInt 0
            , /Data/length
                ( Value /this -> /Data/Cons [ /T=TopType ]
                    ( /tail=~ConsList [ /T=TVVar /T ]
                    , /head=TVVar /T
                    ) = /Data/Cons ( Value /head )
                    ( Value /tail ->
                        ( /Data/Nil | /Data/Cons [ /T=TopType ]
                            ( /tail=~ConsList [ /T=TVVar /T ]
                            , /head=TVVar /T
                            )
                        )
                    )
                ) ->
                ( /Data/Primitive/Integer | /operator+
                    ( /l=/Data/Primitive/Integer
                    , /r=/Data/Primitive/Integer
                    )
                ) = /operator+
                ( Value /l -> /Data/Primitive/Integer = CInt 1 )
                ( Value /r -> /Data/Primitive/Integer = /Data/length ( Value /this -> TVArg /tail = Value /tail ) )
            , /Data/enum [ /T : ∀/Data/Enum ] -> ∀/Data/Set
            ]
        ,
            [ CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGClass
                ( False
                , /Data/String
                , [ /Data/String ]
                , Just ""
                )
            , CGClass
                ( True
                , /Data/ConsList
                ,
                    [ /Data/Cons [ /T=TVVar /T ]
                        ( /tail=~ConsList [ /T=TVVar /T ]
                        , /head=TVVar /T
                        )
                    , /Data/Nil
                    ]
                , Just "The simplest kind of list can be created by prepending.
                  A [ConsList] defines a list either by prepending to a list or with an empty list."
                )
            , CGClass
                ( False
                , /Data/Enum
                , []
                , Just "[Enum] represents a type which can be enumerated.
                  It defines a single function [enum] which lists all of the values in the type."
                )
            , CGClass
                ( False
                , /Data/Functor
                ,
                    [ ∀/Data/Option
                    , ∀/Data/ConsList
                    ]
                , Just "A [Functor] is a basic property of a collection.
                  It has a single operation [fmap] that applies a function to each element in the collection.$F[$A: $T].fmap[$F: Functor](fn(v: $A) -> $B) -> $F[$B: $T]  "
                )
            , CGClass
                ( False
                , /Data/List
                , []
                , Just ""
                )
            , CGClass
                ( True
                , /Data/Option
                ,
                    [ TVVar /T
                    , /Data/None
                    ]
                , Just "[Option] defines a type that might have a value or [None].
                  It can be used to handle operations that are uncertain if they can produce a response."
                )
            , CGClass
                ( False
                , /Data/Set
                , []
                , Just ""
                )
            ]
        ,
            [ /Catln/#md
                ( Value /text -> /Data/String = CStr "# Catln Core Data Types
                These define the basic data types used in the language." )
            , /Catln/#md
                ( Value /text -> /Data/String = CStr "## String" )
            , /Catln/#md
                ( Value /text -> /Data/String = CStr "## Context" )
            , /Catln/#md
                ( Value /text -> /Data/String = CStr "## Collections
                Collections are contains that hold elements of a type inside them." )
            , /Catln/#md
                ( Value /text -> /Data/String = CStr "A [Functor] is a basic property of a collection.
                It has a single operation [fmap] that applies a function to each element in the collection." )
            , /Catln/#md
                ( Value /text -> /Data/String = CStr "$F[$A: $T].fmap[$F: Functor](fn(v: $A) -> $B) -> $F[$B: $T]" )
            , /Catln/#md
                ( Value /text -> /Data/String = CStr "## Collections" )
            , /Catln/#md
                ( Value /text -> /Data/String = CStr "[Option] defines a type that might have a value or [None].
                It can be used to handle operations that are uncertain if they can produce a response." )
            , /Catln/#md
                ( Value /text -> /Data/String = CStr "None.fmap(fn) = None" )
            , /Catln/#md
                ( Value /text -> /Data/String = CStr "$T.fmap(fn($T)) = fn(this)" )
            , /Catln/#md
                ( Value /text -> /Data/String = CStr "A [List] is a collection of zero or more ordered items." )
            , /Catln/#md
                ( Value /text -> /Data/String = CStr "The simplest kind of list can be created by prepending.
                A [ConsList] defines a list either by prepending to a list or with an empty list." )
            , /Catln/#md
                ( Value /text -> /Data/String = CStr "/operator+:<$T>($T l, ConsList<$T> r) = Cons(head=l, tail=r)
                [operator+:] is a utility operator to prepend an element onto a [List]." )
            , /Catln/#md
                ( Value /text -> /Data/String = CStr "#### [length]
                The [length] of a [List] is the number of items inside of it." )
            , /Catln/#md
                ( Value /text -> /Data/String = CStr "Nil.fmap(fn) = Nil" )
            , /Catln/#md
                ( Value /text -> /Data/String = CStr "Cons(head, tail).fmap(fn) = Cons(head=fn(head), tail=tail.fmap(fn))" )
            , /Catln/#md
                ( Value /text -> /Data/String = CStr "A [Set] is a collection of zero or more unique items.
                It is not ordered." )
            , /Catln/#md
                ( Value /text -> /Data/String = CStr "[Enum] represents a type which can be enumerated.
                It defines a single function [enum] which lists all of the values in the type." )
            ]
        )
    , ct
        ( CStr "/repo/dir/stack/core/data.ct" )
    ,
        [ ct
            ( CStr "/repo/dir/stack/core/primitives.ct" )
        ]
    )
,
    (
        ( []
        , []
        ,
            [ /Catln/#md
                ( Value /text -> /Data/String = CStr "# Catln Core Library
                This is the Catln core library.
                It defines the fundamental units of the language, core data types, basic compilation, and standard methods.
                All Catln files will automatically import the core library." )
            ]
        )
    , ct
        ( CStr "/repo/dir/stack/core/main.ct" )
    ,
        [ ct
            ( CStr "/repo/dir/stack/core/algebra.ct" )
        , ct
            ( CStr "/repo/dir/stack/core/primitives.ct" )
        , ct
            ( CStr "/repo/dir/stack/core/data.ct" )
        , ct
            ( CStr "/repo/dir/stack/core/compile.ct" )
        , ct
            ( CStr "/repo/dir/stack/core/webdoc.ct" )
        ]
    )
,
    (
        (
            [ Value /
            , Value /Data/Primitive/True
            , Value /Data/Primitive/False
            , /operator== ( Value /l -> ∀/Data/Primitive/Boolean = Hole ∀/Data/Primitive/Boolean HoleActive Nothing ) ( Value /r -> ∀/Data/Primitive/Boolean = Hole ∀/Data/Primitive/Boolean HoleActive Nothing ) -> ∀/Data/Primitive/Boolean
            , /operator== ( Value /l -> /Data/Primitive/True = Hole /Data/Primitive/True HoleActive Nothing ) ( Value /r -> /Data/Primitive/True = Hole /Data/Primitive/True HoleActive Nothing ) -> /Data/Primitive/True = Value /Data/Primitive/True
            , /operator== ( Value /l -> /Data/Primitive/True = Hole /Data/Primitive/True HoleActive Nothing ) ( Value /r -> /Data/Primitive/False = Hole /Data/Primitive/False HoleActive Nothing ) -> /Data/Primitive/False = Value /Data/Primitive/False
            , /operator== ( Value /l -> /Data/Primitive/False = Hole /Data/Primitive/False HoleActive Nothing ) ( Value /r -> /Data/Primitive/True = Hole /Data/Primitive/True HoleActive Nothing ) -> /Data/Primitive/False = Value /Data/Primitive/False
            , /operator== ( Value /l -> /Data/Primitive/False = Hole /Data/Primitive/False HoleActive Nothing ) ( Value /r -> /Data/Primitive/False = Hole /Data/Primitive/False HoleActive Nothing ) -> /Data/Primitive/True = Value /Data/Primitive/True
            , /operator~ ( Value /a -> ∀/Data/Primitive/Boolean = Hole ∀/Data/Primitive/Boolean HoleActive Nothing ) -> ∀/Data/Primitive/Boolean
            , /operator~ ( Value /a -> /Data/Primitive/True = Hole /Data/Primitive/True HoleActive Nothing ) -> /Data/Primitive/False = Value /Data/Primitive/False
            , /operator~ ( Value /a -> /Data/Primitive/False = Hole /Data/Primitive/False HoleActive Nothing ) -> /Data/Primitive/True = Value /Data/Primitive/True
            , /operator&& ( Value /l -> ∀/Data/Primitive/Boolean = Hole ∀/Data/Primitive/Boolean HoleActive Nothing ) ( Value /r -> ∀/Data/Primitive/Boolean = Hole ∀/Data/Primitive/Boolean HoleActive Nothing ) -> ∀/Data/Primitive/Boolean
            , /operator&& ( Value /l -> /Data/Primitive/True = Hole /Data/Primitive/True HoleActive Nothing ) ( Value /r -> /Data/Primitive/True = Hole /Data/Primitive/True HoleActive Nothing ) -> /Data/Primitive/True = Value /Data/Primitive/True
            , /operator&& ( Value /l -> ∀/Data/Primitive/Boolean = Hole ∀/Data/Primitive/Boolean HoleActive Nothing ) ( Value /r -> /Data/Primitive/False = Hole /Data/Primitive/False HoleActive Nothing ) -> /Data/Primitive/False = Value /Data/Primitive/False
            , /operator&& ( Value /l -> /Data/Primitive/False = Hole /Data/Primitive/False HoleActive Nothing ) ( Value /r -> ∀/Data/Primitive/Boolean = Hole ∀/Data/Primitive/Boolean HoleActive Nothing ) -> /Data/Primitive/False = Value /Data/Primitive/False
            , /operator|| ( Value /l -> ∀/Data/Primitive/Boolean = Hole ∀/Data/Primitive/Boolean HoleActive Nothing ) ( Value /r -> ∀/Data/Primitive/Boolean = Hole ∀/Data/Primitive/Boolean HoleActive Nothing ) -> ∀/Data/Primitive/Boolean
            , /operator|| ( Value /l -> /Data/Primitive/True = Hole /Data/Primitive/True HoleActive Nothing ) ( Value /r -> ∀/Data/Primitive/Boolean = Hole ∀/Data/Primitive/Boolean HoleActive Nothing ) -> /Data/Primitive/True = Value /Data/Primitive/True
            , /operator|| ( Value /l -> ∀/Data/Primitive/Boolean = Hole ∀/Data/Primitive/Boolean HoleActive Nothing ) ( Value /r -> /Data/Primitive/True = Hole /Data/Primitive/True HoleActive Nothing ) -> /Data/Primitive/True = Value /Data/Primitive/True
            , /operator|| ( Value /l -> /Data/Primitive/False = Hole /Data/Primitive/False HoleActive Nothing ) ( Value /r -> /Data/Primitive/False = Hole /Data/Primitive/False HoleActive Nothing ) -> /Data/Primitive/False = Value /Data/Primitive/False
            , /operator^ ( Value /l -> ∀/Data/Primitive/Boolean = Hole ∀/Data/Primitive/Boolean HoleActive Nothing ) ( Value /r -> ∀/Data/Primitive/Boolean = Hole ∀/Data/Primitive/Boolean HoleActive Nothing ) -> ∀/Data/Primitive/Boolean
            , /operator^ ( Value /l -> /Data/Primitive/True = Hole /Data/Primitive/True HoleActive Nothing ) ( Value /r -> /Data/Primitive/True = Hole /Data/Primitive/True HoleActive Nothing ) -> /Data/Primitive/False = Value /Data/Primitive/False
            , /operator^ ( Value /l -> /Data/Primitive/True = Hole /Data/Primitive/True HoleActive Nothing ) ( Value /r -> /Data/Primitive/False = Hole /Data/Primitive/False HoleActive Nothing ) -> /Data/Primitive/True = Value /Data/Primitive/True
            , /operator^ ( Value /l -> /Data/Primitive/False = Hole /Data/Primitive/False HoleActive Nothing ) ( Value /r -> /Data/Primitive/True = Hole /Data/Primitive/True HoleActive Nothing ) -> /Data/Primitive/True = Value /Data/Primitive/True
            , /operator^ ( Value /l -> /Data/Primitive/False = Hole /Data/Primitive/False HoleActive Nothing ) ( Value /r -> /Data/Primitive/False = Hole /Data/Primitive/False HoleActive Nothing ) -> /Data/Primitive/False = Value /Data/Primitive/False
            , Value /Data/Primitive/Integer
            , Value /Data/Primitive/Float
            , /operator- ( Value /a -> /Data/Primitive/Integer = Hole /Data/Primitive/Integer HoleActive Nothing ) -> /Data/Primitive/Integer
            , /operator- ( Value /l -> /Data/Primitive/Integer = Hole /Data/Primitive/Integer HoleActive Nothing ) ( Value /r -> /Data/Primitive/Integer = Hole /Data/Primitive/Integer HoleActive Nothing ) -> /Data/Primitive/Integer
            , /operator+ ( Value /l -> /Data/Primitive/Integer = Hole /Data/Primitive/Integer HoleActive Nothing ) ( Value /r -> /Data/Primitive/Integer = Hole /Data/Primitive/Integer HoleActive Nothing ) -> /Data/Primitive/Integer
            , /operator* ( Value /l -> /Data/Primitive/Integer = Hole /Data/Primitive/Integer HoleActive Nothing ) ( Value /r -> /Data/Primitive/Integer = Hole /Data/Primitive/Integer HoleActive Nothing ) -> /Data/Primitive/Integer
            , /operator<= ( Value /l -> /Data/Primitive/Integer = Hole /Data/Primitive/Integer HoleActive Nothing ) ( Value /r -> /Data/Primitive/Integer = Hole /Data/Primitive/Integer HoleActive Nothing ) -> ∀/Data/Primitive/Boolean
            , /operator>= ( Value /l -> /Data/Primitive/Integer = Hole /Data/Primitive/Integer HoleActive Nothing ) ( Value /r -> /Data/Primitive/Integer = Hole /Data/Primitive/Integer HoleActive Nothing ) -> ∀/Data/Primitive/Boolean
            , /operator< ( Value /l -> /Data/Primitive/Integer = Hole /Data/Primitive/Integer HoleActive Nothing ) ( Value /r -> /Data/Primitive/Integer = Hole /Data/Primitive/Integer HoleActive Nothing ) -> ∀/Data/Primitive/Boolean
            , /operator> ( Value /l -> /Data/Primitive/Integer = Hole /Data/Primitive/Integer HoleActive Nothing ) ( Value /r -> /Data/Primitive/Integer = Hole /Data/Primitive/Integer HoleActive Nothing ) -> ∀/Data/Primitive/Boolean
            , /operator== ( Value /l -> /Data/Primitive/Integer = Hole /Data/Primitive/Integer HoleActive Nothing ) ( Value /r -> /Data/Primitive/Integer = Hole /Data/Primitive/Integer HoleActive Nothing ) -> ∀/Data/Primitive/Boolean
            , /operator!= ( Value /l -> /Data/Primitive/Integer = Hole /Data/Primitive/Integer HoleActive Nothing ) ( Value /r -> /Data/Primitive/Integer = Hole /Data/Primitive/Integer HoleActive Nothing ) -> ∀/Data/Primitive/Boolean
            ]
        ,
            [ CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGClass
                ( False
                , /Data/Primitive/Integer
                , [ /Data/Primitive/Integer ]
                , Just ""
                )
            , CGClass
                ( False
                , /Data/Primitive/Boolean
                ,
                    [ ∀/Data/Primitive/Boolean
                    , ∀/Data/Primitive/Number
                    ]
                , Just " "
                )
            , CGClass
                ( False
                , /Data/Primitive/Integer
                , [ /Data/Primitive/Integer ]
                , Just ""
                )
            , CGClass
                ( False
                , /Data/Primitive/Boolean
                , [ ∀/Data/Primitive/Boolean ]
                , Just ""
                )
            , CGClass
                ( True
                , /Data/Primitive/Boolean
                ,
                    [ /Data/Primitive/True
                    , /Data/Primitive/False
                    ]
                , Just ""
                )
            , CGClass
                ( True
                , /Data/Primitive/Number
                ,
                    [ /Data/Primitive/Integer
                    , /Data/Primitive/Float
                    ]
                , Just ""
                )
            ]
        ,
            [ /Catln/#md
                ( Value /text -> /Data/String = CStr "# Catln Core Primitives
                These types some of the basic types used in Catln." )
            , /Catln/#md
                ( Value /text -> /Data/String = CStr "## Anonymous type" )
            , /Catln/#md
                ( Value /text -> /Data/String = CStr "## Booleans" )
            , /Catln/#md
                ( Value /text -> /Data/String = CStr "enum<Boolean> = [False, True]" )
            , /Catln/#md
                ( Value /text -> /Data/String = CStr "## Integers" )
            , /Catln/#md
                ( Value /text -> /Data/String = CStr "### Commutative Group" )
            , /Catln/#md
                ( Value /text -> /Data/String = CStr "mempty<Integer $T> = 0" )
            , /Catln/#md
                ( Value /text -> /Data/String = CStr "mappend<Integer $T>($T l, $T r) = l + r" )
            , /Catln/#md
                ( Value /text -> /Data/String = CStr "inverse<Integer $T>($T t) = -t" )
            ]
        )
    , ct
        ( CStr "/repo/dir/stack/core/primitives.ct" )
    ,
        [ ct
            ( CStr "/repo/dir/stack/core/algebra.ct" )
        , ct
            ( CStr "/repo/dir/stack/core/data.ct" )
        ]
    )
,
    (
        (
            [ /Catln/Doc/dshow ( Value /s -> ∀/Catln/Doc/DShow ) -> TVArg /s = Value /s
            , /Catln/Doc/Show/MD ( Value /text -> /Data/String )
            , /Catln/Doc/dshow
                ( Value /s -> /Catln/#md ( /text=TopType ) = /Catln/#md ( Value /text -> ~String ) ) -> /Catln/Doc/Show/MD ( /text=~String ) = /Catln/Doc/Show/MD ( Value /text -> TVArg /text = Value /text )
            , /Catln/Doc/dshow
                ( Value /s -> /Catln/#print ( /p=TopType ) = /Catln/#print ( Value /p ) ) -> TVArg /p = Value /p
            , Value /Catln/Doc/#listProgram
            , Value /Catln/Doc/Show/ListProgram
            , /Catln/Doc/dshow ( Value /s -> /Catln/Doc/#listProgram = Value /Catln/Doc/#listProgram ) -> /Catln/Doc/Show/ListProgram = Value /Catln/Doc/Show/ListProgram
            ]
        ,
            [ CGType
            , CGType
            , CGType
            , CGType
            , CGClass
                ( False
                , /Catln/Doc/DShow
                ,
                    [ /Data/String
                    , /Catln/CatlnResult..
                    , /Catln/Doc/Show/MD..
                    , /Catln/Doc/Show/ListProgram..
                    ]
                , Just "Represents objects which can be shown in the webdocs.    "
                )
            ]
        ,
            [ /Catln/#md
                ( Value /text -> /Data/String = CStr "# Catln WebDocs
                This provides common components and annotations used in Webdocs.
                These include the ones" )
            , /Catln/#md
                ( Value /text -> /Data/String = CStr "Represents objects which can be shown in the webdocs." )
            , /Catln/#md
                ( Value /text -> /Data/String = CStr "dshow(s) -> /Catln/Doc/DShow" )
            ]
        )
    , ct
        ( CStr "/repo/dir/stack/core/webdoc.ct" )
    ,
        [ ct
            ( CStr "/repo/dir/stack/core/compile.ct" )
        ]
    )
,
    (
        (
            [ /id ( Value /x ) -> TVArg /x = Value /x
            , /ContextIn ( Value /value -> /main = Value /main ) ( Value /io -> /Catln/IO ) ->
                ( /Catln/exit
                    ( /this=/Catln/IO
                    , /val=/Data/Primitive/Integer
                    ) | /Catln/IO
                ) = /Catln/exit
                ( Value /val -> /Data/Primitive/Integer = /id
                    ( Value /x -> /Data/Primitive/Integer = CInt 0 )
                ) ( Value /this -> TVArg /io = Value /io )
            ]
        ,
            [ CGType
            , CGType
            ]
        ,
            [ /Catln/#md
                ( Value /text -> /Data/String = CStr "Tests an identity function.
                It requires using the type of the input argument as the output type of id as well.
                So, it must be read as `id($T) -> $T`, not (id(Any) -> Any)." )
            ]
        )
    , ct
        ( CStr "/repo/dir/test/Integration/code/id.ct" )
    ,
        [ dir
            ( CStr "/repo/dir/stack/core" )
        ]
    )
,
    (
        ( []
        , []
        , []
        )
    , dir
        ( CStr "/repo/dir/stack/core" )
    ,
        [ ct
            ( CStr "/repo/dir/stack/core/main.ct" )
        ]
    )
]