(
    [ Value /Data/String
    , /operator==( EAppArg Value /l -> /Data/String = Hole /Data/String HoleActive Nothing )( EAppArg Value /r -> /Data/String = Hole /Data/String HoleActive Nothing ) -> ∀/Data/Primitive/Boolean
    , /Data/toString( EAppArg Value /this -> /Data/String ) -> /Data/String
    , /Data/toString( EAppArg Value /this -> /Data/String ) -> TVArg /this = ( Value /this ↦ TVArg /this )
    , /Data/toString( EAppArg Value /this -> /Data/Primitive/Integer ) -> /Data/String
    , /Context( EAppVar /V TopType )( EAppArg Value /value -> TVVar /V )( EAppSpread Hole TopType HoleActive Nothing )
    , /ContextIn( EAppVar /V TopType )( EAppArg Value /value -> TVVar /V )( EAppSpread Hole TopType HoleActive Nothing )
    , /ContextOut( EAppVar /V TopType )( EAppArg Value /value -> TVVar /V )( EAppSpread Hole TopType HoleActive Nothing )
    , /Context( EAppVar /T TopType )( EAppVar /V TopType )( EAppArg Value /value -> TVVar /V )( EAppSpread Hole TopType HoleActive Nothing ) | /operator?->
        ( EAppArg Value /l -> /ContextIn[ /V=TopType ]( /value=TopType ).. = /ContextIn( EAppVar /V TVVar /V )( EAppArg Value /value -> TVVar /V = Hole TVVar /V HoleActive Nothing )( EAppSpread Hole TopType HoleActive Nothing ) )( EAppArg Value /r -> TVVar /T = Hole TVVar /T HoleActive Nothing ) -> TVVar /T
    , Value /Data/None
    , /Data/Cons( EAppVar /T TopType )( EAppArg Value /head -> TVVar /T )( EAppArg Value /tail -> ∀/Data/ConsList )
    , Value /Data/Nil
    , /Data/length( EAppArg Value /this -> /Data/Nil ) -> /Data/Primitive/Integer = 0
    , /Data/length
        ( EAppArg Value /this -> /Data/Cons[ /T=TopType ]
            ( /head=TVVar /T
            , /tail=~ConsList[ /T=TVVar /T ]
            ) = /Data/Cons( EAppArg Value /head )
            ( EAppArg Value /tail ->
                ( /Data/Nil | /Data/Cons[ /T=TopType ]
                    ( /head=TVVar /T
                    , /tail=~ConsList[ /T=TVVar /T ]
                    )
                )
            )
        ) ->
        ( /operator+
            ( /r=/Data/Primitive/Integer
            , /l=/Data/Primitive/Integer
            ) | /Data/Primitive/Integer
        ) = /operator+
        ( EAppArg Value /l -> /Data/Primitive/Integer = 1 )
        ( EAppArg Value /r -> /Data/Primitive/Integer =
            ( /Data/length
                ( EAppArg Value /this -> TVArg /tail = ( Value /tail ↦ TVArg /tail ) ) ↦ /Data/Primitive/Integer
            )
        )
    , /Data/enum( EAppVar /T ∀/Data/Enum ) -> ∀/Data/Set
    ]
,
    [ CGType
    , CGType
    , CGType
    , CGType
    , CGType
    , CGType
    , CGType
    , CGType
    , CGType
    , CGType
    , CGType
    , CGClass
        ( False
        , /Data/String
        , [ /Data/String ]
        , Just ""
        )
    , CGClass
        ( True
        , /Data/ConsList
        ,
            [ /Data/Cons[ /T=TVVar /T ]
                ( /head=TVVar /T
                , /tail=~ConsList[ /T=TVVar /T ]
                )
            , /Data/Nil
            ]
        , Just "The simplest kind of list can be created by prepending.
          A [ConsList] defines a list either by prepending to a list or with an empty list."
        )
    , CGClass
        ( False
        , /Data/Enum
        , []
        , Just "[Enum] represents a type which can be enumerated.
          It defines a single function [enum] which lists all of the values in the type."
        )
    , CGClass
        ( False
        , /Data/Functor
        ,
            [ ∀/Data/Option
            , ∀/Data/ConsList
            ]
        , Just "A [Functor] is a basic property of a collection.
          It has a single operation [fmap] that applies a function to each element in the collection.$F[$A: $T].fmap[$F: Functor](fn(v: $A) -> $B) -> $F[$B: $T]  "
        )
    , CGClass
        ( False
        , /Data/List
        , []
        , Just ""
        )
    , CGClass
        ( True
        , /Data/Option
        ,
            [ TVVar /T
            , /Data/None
            ]
        , Just "[Option] defines a type that might have a value or [None].
          It can be used to handle operations that are uncertain if they can produce a response."
        )
    , CGClass
        ( False
        , /Data/Set
        , []
        , Just ""
        )
    ]
,
    [ /Catln/#md
        ( EAppArg Value /text -> /Data/String = "# Catln Core Data Types
        These define the basic data types used in the language." )
    , /Catln/#md
        ( EAppArg Value /text -> /Data/String = "## String" )
    , /Catln/#md
        ( EAppArg Value /text -> /Data/String = "## Context" )
    , /Catln/#md
        ( EAppArg Value /text -> /Data/String = "## Collections
        Collections are contains that hold elements of a type inside them." )
    , /Catln/#md
        ( EAppArg Value /text -> /Data/String = "A [Functor] is a basic property of a collection.
        It has a single operation [fmap] that applies a function to each element in the collection." )
    , /Catln/#md
        ( EAppArg Value /text -> /Data/String = "$F[$A: $T].fmap[$F: Functor](fn(v: $A) -> $B) -> $F[$B: $T]" )
    , /Catln/#md
        ( EAppArg Value /text -> /Data/String = "## Collections" )
    , /Catln/#md
        ( EAppArg Value /text -> /Data/String = "[Option] defines a type that might have a value or [None].
        It can be used to handle operations that are uncertain if they can produce a response." )
    , /Catln/#md
        ( EAppArg Value /text -> /Data/String = "None.fmap(fn) = None" )
    , /Catln/#md
        ( EAppArg Value /text -> /Data/String = "$T.fmap(fn($T)) = fn(this)" )
    , /Catln/#md
        ( EAppArg Value /text -> /Data/String = "A [List] is a collection of zero or more ordered items." )
    , /Catln/#md
        ( EAppArg Value /text -> /Data/String = "The simplest kind of list can be created by prepending.
        A [ConsList] defines a list either by prepending to a list or with an empty list." )
    , /Catln/#md
        ( EAppArg Value /text -> /Data/String = "/operator+:<$T>($T l, ConsList<$T> r) = Cons(head=l, tail=r)
        [operator+:] is a utility operator to prepend an element onto a [List]." )
    , /Catln/#md
        ( EAppArg Value /text -> /Data/String = "#### [length]
        The [length] of a [List] is the number of items inside of it." )
    , /Catln/#md
        ( EAppArg Value /text -> /Data/String = "Nil.fmap(fn) = Nil" )
    , /Catln/#md
        ( EAppArg Value /text -> /Data/String = "Cons(head, tail).fmap(fn) = Cons(head=fn(head), tail=tail.fmap(fn))" )
    , /Catln/#md
        ( EAppArg Value /text -> /Data/String = "A [Set] is a collection of zero or more unique items.
        It is not ordered." )
    , /Catln/#md
        ( EAppArg Value /text -> /Data/String = "[Enum] represents a type which can be enumerated.
        It defines a single function [enum] which lists all of the values in the type." )
    ]
)