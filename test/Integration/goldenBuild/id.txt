[
    (
        (
            [ /operator!= ( EAppArg Value /l -> TVVar /T = Hole TVVar /T HoleActive Nothing ) ( EAppArg Value /r -> TVVar /T = Hole TVVar /T HoleActive Nothing ) ( EAppVar /T ∀/Data/Algebra/Eq ) -> ∀/Data/Primitive/Boolean
            , Value /Data/Algebra/LessThan
            , Value /Data/Algebra/Equal
            , Value /Data/Algebra/GreaterThan
            , Value /Data/Algebra/NoOrdering
            , /Data/Algebra/compare ( EAppVar /T ∀/Data/Algebra/Ord ) ( EAppArg Value /l -> TVVar /T ) ( EAppArg Value /r -> TVVar /T ) -> ∀/Data/Algebra/Ordering
            , /Data/Algebra/compare ( EAppVar /T ∀/Data/Algebra/POrd ) ( EAppArg Value /l -> TVVar /T ) ( EAppArg Value /r -> TVVar /T ) -> ∀/Data/Algebra/POrdering
            , /operator<= ( EAppArg Value /l -> TVVar /T = Hole TVVar /T HoleActive Nothing ) ( EAppArg Value /r -> TVVar /T = Hole TVVar /T HoleActive Nothing ) ( EAppVar /T ∀/Data/Algebra/Ord ) -> ∀/Data/Primitive/Boolean
            , /operator>= ( EAppArg Value /l -> TVVar /T = Hole TVVar /T HoleActive Nothing ) ( EAppArg Value /r -> TVVar /T = Hole TVVar /T HoleActive Nothing ) ( EAppVar /T ∀/Data/Algebra/Ord ) -> ∀/Data/Primitive/Boolean
            , /operator< ( EAppArg Value /l -> TVVar /T = Hole TVVar /T HoleActive Nothing ) ( EAppArg Value /r -> TVVar /T = Hole TVVar /T HoleActive Nothing ) ( EAppVar /T ∀/Data/Algebra/Ord ) -> ∀/Data/Primitive/Boolean
            , /operator> ( EAppArg Value /l -> TVVar /T = Hole TVVar /T HoleActive Nothing ) ( EAppArg Value /r -> TVVar /T = Hole TVVar /T HoleActive Nothing ) ( EAppVar /T ∀/Data/Algebra/Ord ) -> ∀/Data/Primitive/Boolean
            , /operator++ ( EAppArg Value /l -> TVVar /T = Hole TVVar /T HoleActive Nothing ) ( EAppArg Value /r -> TVVar /T = Hole TVVar /T HoleActive Nothing ) ( EAppVar /T ∀/Data/Algebra/Semigroup ) -> TVVar /T
            , /Data/Algebra/mempty ( EAppVar /T ∀/Data/Algebra/Monoid ) -> TVVar /T
            , /Data/Algebra/inverse ( EAppVar /T ∀/Data/Algebra/Group ) ( EAppArg Value /t -> TVVar /T ) -> TVVar /T
            ]
        ,
            [ CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGClass
                ( False
                , /Data/Algebra/CommutativeMonoid
                , []
                , Just "The [CommutativeMonoid] builds on top of the [Monoid].
                  It is also called an Abelian Monoid
                  Here, integers with addition are a [CommutativeMonoid], but [String]s are not."
                )
            , CGClass
                ( False
                , /Data/Algebra/Eq
                ,
                    [ ∀/Data/Algebra/POrd
                    , ∀/Data/Algebra/Semigroup
                    ]
                , Just "The Eq class is used to define values which can be compared for equality.
                  While naive tuple equality often works, some types have equality that behaves differently and must be defined.
                  For example, a TreeSet can insert items in different order and produce different trees, but with equal sets.
                  There are only two operations for eq: [operator==] and [operator!=]./operator==</Data/Algebra/Eq $T>($T l, $T r) -> BooleanThis checks whether two items are equal.
                  Note that it only compares like items with each other, not that you can compare apples to oranges. If something can be compared for order, it should also be comparable for equality by the following relationship: "
                )
            , CGClass
                ( False
                , /Data/Algebra/Group
                , []
                , Just "The [Group] builds on top of the [Monoid] (not necessarily the [CommutativeMonoid]).
                  It adds an inverse operation that finds the opposite of an element.
                  For integers with addition, negation with [operator~] would be the inverse.
                  Something like [String]s would not have an inverse, so it wouldn't be a [Group]."
                )
            , CGClass
                ( False
                , /Data/Algebra/Monoid
                ,
                    [ ∀/Data/Algebra/CommutativeMonoid
                    , ∀/Data/Algebra/Group
                    ]
                , Just "The [Monoid] builds on top of the [Semigroup].
                  It adds the identity value [mempty].
                  The integers with addition form a [Monoid], and 0 is the value for [mempty].
                  Another example is [String] where "" is the value for [mempty]  "
                )
            , CGClass
                ( False
                , /Data/Algebra/Ord
                , [ ∀/Data/Primitive/Number ]
                , Just "Ord is used to define types which can be strictly ordered.
                  Every element, when compared must have one of the following [Ordering] relationships: "
                )
            , CGClass
                ( True
                , /Data/Algebra/Ordering
                ,
                    [ /Data/Algebra/LessThan
                    , /Data/Algebra/Equal
                    , /Data/Algebra/GreaterThan
                    ]
                , Just "The Orderings can relate any like items of Ord. "
                )
            , CGClass
                ( False
                , /Data/Algebra/POrd
                , [ ∀/Data/Algebra/Ord ]
                , Just "In addition to [Ord], [POrd] defines a partial ordering.
                  Partially ordered items can be compared, but may result in [NoOrdering]: "
                )
            , CGClass
                ( True
                , /Data/Algebra/POrdering
                ,
                    [ ∀/Data/Algebra/Ordering
                    , /Data/Algebra/NoOrdering
                    ]
                , Just "As an example, sets can be partially ordered by the subset operation.
                  One set A <= B when A is a subset of B.
                  An ordered example is {1} <= {1, 2}.
                  But, two sets like {1} and {2} have no ordering between them."
                )
            , CGClass
                ( False
                , /Data/Algebra/Semigroup
                , [ ∀/Data/Algebra/Monoid ]
                , Just "A semigroup is a type combined with an associative operation called [operator++].
                  For example, integers with the addition operation are a semigroup. "
                )
            ]
        , []
        )
    , ct
        ( CStr "/repo/dir/stack/core/algebra.ct" )
    ,
        [ ct
            ( CStr "/repo/dir/stack/core/primitives.ct" )
        , ct
            ( CStr "/repo/dir/stack/core/compile.ct" )
        ]
    )
,
    (
        (
            [ Value /Catln/IO
            , /Catln/exit ( EAppArg Value /val -> /Data/Primitive/Integer ) ( EAppArg Value /this -> /Catln/IO ) -> /Catln/IO
            , /Catln/println ( EAppArg Value /msg -> /Data/String ) ( EAppArg Value /this -> /Catln/IO ) -> /Catln/IO
            , /Catln/#md ( EAppArg Value /text -> /Data/String )
            , /Catln/#name ( EAppArg Value /name -> /Data/String )
            , Value /Catln/#else
            , /Catln/#runtime ( EAppArg Value /k -> /Data/String )
            , Value /Catln/#argStart
            , Value /Catln/#argEnd
            , /Catln/#assert ( EAppArg Value /test -> ∀/Data/Primitive/Boolean )
            , /Catln/#assert ( EAppArg Value /test -> ∀/Data/Primitive/Boolean ) ( EAppArg Value /msg -> /Data/String )
            , /Catln/#print ( EAppArg Value /p -> ∀/Catln/Doc/DShow )
            , Value /Catln/#test
            , Value /Catln/#example
            , /operator?-> ( EAppArg Value /l= Hole TopType HoleActive Nothing ) ( EAppArg Value /r= Hole TopType HoleActive Nothing ) -> ∀/Data/Primitive/Boolean
            , /Catln/CatlnResult ( EAppArg Value /name -> /Data/String ) ( EAppArg Value /contents -> /Data/String )
            , /Catln/www ( EAppArg Value /html -> /Data/String ) -> /Catln/CatlnResult
                ( /name=/Data/String
                , /contents=/Data/String
                ) = /Catln/CatlnResult
                ( EAppArg Value /name -> /Data/String = "index.html" )
                ( EAppArg Value /contents -> TVArg /html = ( Value /html ↦ TVArg /html ) )
            , /Catln/llvm ( EAppArg Value /c ) -> /Catln/CatlnResult..
            , Value /Catln/Then
            , Value /Catln/Else
            , /Catln/ThenElse/fromBool ( EAppArg Value /v -> ∀/Data/Primitive/Boolean ) -> ∀/Catln/ThenElse
            , /Catln/ThenElse/fromBool ( EAppArg Value /v -> /Data/Primitive/True = Value /Data/Primitive/True ) -> /Catln/Then = Value /Catln/Then
            , /Catln/ThenElse/fromBool ( EAppArg Value /v -> /Data/Primitive/False = Value /Data/Primitive/False ) -> /Catln/Else = Value /Catln/Else
            ]
        ,
            [ CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGClass
                ( True
                , /Catln/ThenElse
                ,
                    [ /Catln/Then
                    , /Catln/Else
                    ]
                , Just ""
                )
            ]
        , []
        )
    , ct
        ( CStr "/repo/dir/stack/core/compile.ct" )
    ,
        [ ct
            ( CStr "/repo/dir/stack/core/primitives.ct" )
        , ct
            ( CStr "/repo/dir/stack/core/data.ct" )
        , ct
            ( CStr "/repo/dir/stack/core/webdoc.ct" )
        ]
    )
,
    (
        (
            [ Value /Data/String
            , /operator== ( EAppArg Value /l -> /Data/String = Hole /Data/String HoleActive Nothing ) ( EAppArg Value /r -> /Data/String = Hole /Data/String HoleActive Nothing ) -> ∀/Data/Primitive/Boolean
            , /Data/toString ( EAppArg Value /this -> /Data/String ) -> /Data/String
            , /Data/toString ( EAppArg Value /this -> /Data/String ) -> TVArg /this = ( Value /this ↦ TVArg /this )
            , /Data/toString ( EAppArg Value /this -> /Data/Primitive/Integer ) -> /Data/String
            , /Context ( EAppVar /V TopType ) ( EAppArg Value /value -> TVVar /V ) ( EAppSpread Hole TopType HoleActive Nothing )
            , /ContextIn ( EAppVar /V TopType ) ( EAppArg Value /value -> TVVar /V ) ( EAppSpread Hole TopType HoleActive Nothing )
            , /ContextOut ( EAppVar /V TopType ) ( EAppArg Value /value -> TVVar /V ) ( EAppSpread Hole TopType HoleActive Nothing )
            , /Context ( EAppVar /T TopType ) ( EAppVar /V TopType ) ( EAppArg Value /value -> TVVar /V ) ( EAppSpread Hole TopType HoleActive Nothing ) | /operator?->
                ( EAppArg Value /l -> /ContextIn [ /V=TopType ] ( /value=TopType ) .. = /ContextIn ( EAppVar /V TVVar /V ) ( EAppArg Value /value -> TVVar /V = Hole TVVar /V HoleActive Nothing ) ( EAppSpread Hole TopType HoleActive Nothing ) ) ( EAppArg Value /r -> TVVar /T = Hole TVVar /T HoleActive Nothing ) -> TVVar /T
            , Value /Data/None
            , /Data/Cons ( EAppVar /T TopType ) ( EAppArg Value /head -> TVVar /T ) ( EAppArg Value /tail -> ∀/Data/ConsList )
            , Value /Data/Nil
            , /Data/length ( EAppArg Value /this -> /Data/Nil ) -> /Data/Primitive/Integer = 0
            , /Data/length
                ( EAppArg Value /this -> /Data/Cons [ /T=TopType ]
                    ( /tail=~ConsList [ /T=TVVar /T ]
                    , /head=TVVar /T
                    ) = /Data/Cons ( EAppArg Value /head )
                    ( EAppArg Value /tail ->
                        ( /Data/Nil | /Data/Cons [ /T=TopType ]
                            ( /tail=~ConsList [ /T=TVVar /T ]
                            , /head=TVVar /T
                            )
                        )
                    )
                ) ->
                ( /Data/Primitive/Integer | /operator+
                    ( /l=/Data/Primitive/Integer
                    , /r=/Data/Primitive/Integer
                    )
                ) = /operator+
                ( EAppArg Value /l -> /Data/Primitive/Integer = 1 )
                ( EAppArg Value /r -> /Data/Primitive/Integer =
                    ( /Data/length
                        ( EAppArg Value /this -> TVArg /tail = ( Value /tail ↦ TVArg /tail ) ) ↦ /Data/Primitive/Integer
                    )
                )
            , /Data/enum ( EAppVar /T ∀/Data/Enum ) -> ∀/Data/Set
            ]
        ,
            [ CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGClass
                ( False
                , /Data/String
                , [ /Data/String ]
                , Just ""
                )
            , CGClass
                ( True
                , /Data/ConsList
                ,
                    [ /Data/Cons [ /T=TVVar /T ]
                        ( /tail=~ConsList [ /T=TVVar /T ]
                        , /head=TVVar /T
                        )
                    , /Data/Nil
                    ]
                , Just "The simplest kind of list can be created by prepending.
                  A [ConsList] defines a list either by prepending to a list or with an empty list."
                )
            , CGClass
                ( False
                , /Data/Enum
                , []
                , Just "[Enum] represents a type which can be enumerated.
                  It defines a single function [enum] which lists all of the values in the type."
                )
            , CGClass
                ( False
                , /Data/Functor
                ,
                    [ ∀/Data/Option
                    , ∀/Data/ConsList
                    ]
                , Just "A [Functor] is a basic property of a collection.
                  It has a single operation [fmap] that applies a function to each element in the collection.$F[$A: $T].fmap[$F: Functor](fn(v: $A) -> $B) -> $F[$B: $T]  "
                )
            , CGClass
                ( False
                , /Data/List
                , []
                , Just ""
                )
            , CGClass
                ( True
                , /Data/Option
                ,
                    [ TVVar /T
                    , /Data/None
                    ]
                , Just "[Option] defines a type that might have a value or [None].
                  It can be used to handle operations that are uncertain if they can produce a response."
                )
            , CGClass
                ( False
                , /Data/Set
                , []
                , Just ""
                )
            ]
        , []
        )
    , ct
        ( CStr "/repo/dir/stack/core/data.ct" )
    ,
        [ ct
            ( CStr "/repo/dir/stack/core/primitives.ct" )
        ]
    )
,
    (
        ( []
        , []
        ,
            [ /Catln/#md
                ( EAppArg Value /text -> /Data/String = "# Catln Core Library
                This is the Catln core library.
                It defines the fundamental units of the language, core data types, basic compilation, and standard methods.
                All Catln files will automatically import the core library." )
            ]
        )
    , ct
        ( CStr "/repo/dir/stack/core/main.ct" )
    ,
        [ ct
            ( CStr "/repo/dir/stack/core/algebra.ct" )
        , ct
            ( CStr "/repo/dir/stack/core/primitives.ct" )
        , ct
            ( CStr "/repo/dir/stack/core/data.ct" )
        , ct
            ( CStr "/repo/dir/stack/core/compile.ct" )
        , ct
            ( CStr "/repo/dir/stack/core/webdoc.ct" )
        ]
    )
,
    (
        (
            [ Value /
            , Value /Data/Primitive/True
            , Value /Data/Primitive/False
            , /operator== ( EAppArg Value /l -> ∀/Data/Primitive/Boolean = Hole ∀/Data/Primitive/Boolean HoleActive Nothing ) ( EAppArg Value /r -> ∀/Data/Primitive/Boolean = Hole ∀/Data/Primitive/Boolean HoleActive Nothing ) -> ∀/Data/Primitive/Boolean
            , /operator== ( EAppArg Value /l -> /Data/Primitive/True = Hole /Data/Primitive/True HoleActive Nothing ) ( EAppArg Value /r -> /Data/Primitive/True = Hole /Data/Primitive/True HoleActive Nothing ) -> /Data/Primitive/True = Value /Data/Primitive/True
            , /operator== ( EAppArg Value /l -> /Data/Primitive/True = Hole /Data/Primitive/True HoleActive Nothing ) ( EAppArg Value /r -> /Data/Primitive/False = Hole /Data/Primitive/False HoleActive Nothing ) -> /Data/Primitive/False = Value /Data/Primitive/False
            , /operator== ( EAppArg Value /l -> /Data/Primitive/False = Hole /Data/Primitive/False HoleActive Nothing ) ( EAppArg Value /r -> /Data/Primitive/True = Hole /Data/Primitive/True HoleActive Nothing ) -> /Data/Primitive/False = Value /Data/Primitive/False
            , /operator== ( EAppArg Value /l -> /Data/Primitive/False = Hole /Data/Primitive/False HoleActive Nothing ) ( EAppArg Value /r -> /Data/Primitive/False = Hole /Data/Primitive/False HoleActive Nothing ) -> /Data/Primitive/True = Value /Data/Primitive/True
            , /operator~ ( EAppArg Value /a -> ∀/Data/Primitive/Boolean = Hole ∀/Data/Primitive/Boolean HoleActive Nothing ) -> ∀/Data/Primitive/Boolean
            , /operator~ ( EAppArg Value /a -> /Data/Primitive/True = Hole /Data/Primitive/True HoleActive Nothing ) -> /Data/Primitive/False = Value /Data/Primitive/False
            , /operator~ ( EAppArg Value /a -> /Data/Primitive/False = Hole /Data/Primitive/False HoleActive Nothing ) -> /Data/Primitive/True = Value /Data/Primitive/True
            , /operator&& ( EAppArg Value /l -> ∀/Data/Primitive/Boolean = Hole ∀/Data/Primitive/Boolean HoleActive Nothing ) ( EAppArg Value /r -> ∀/Data/Primitive/Boolean = Hole ∀/Data/Primitive/Boolean HoleActive Nothing ) -> ∀/Data/Primitive/Boolean
            , /operator&& ( EAppArg Value /l -> /Data/Primitive/True = Hole /Data/Primitive/True HoleActive Nothing ) ( EAppArg Value /r -> /Data/Primitive/True = Hole /Data/Primitive/True HoleActive Nothing ) -> /Data/Primitive/True = Value /Data/Primitive/True
            , /operator&& ( EAppArg Value /l -> ∀/Data/Primitive/Boolean = Hole ∀/Data/Primitive/Boolean HoleActive Nothing ) ( EAppArg Value /r -> /Data/Primitive/False = Hole /Data/Primitive/False HoleActive Nothing ) -> /Data/Primitive/False = Value /Data/Primitive/False
            , /operator&& ( EAppArg Value /l -> /Data/Primitive/False = Hole /Data/Primitive/False HoleActive Nothing ) ( EAppArg Value /r -> ∀/Data/Primitive/Boolean = Hole ∀/Data/Primitive/Boolean HoleActive Nothing ) -> /Data/Primitive/False = Value /Data/Primitive/False
            , /operator|| ( EAppArg Value /l -> ∀/Data/Primitive/Boolean = Hole ∀/Data/Primitive/Boolean HoleActive Nothing ) ( EAppArg Value /r -> ∀/Data/Primitive/Boolean = Hole ∀/Data/Primitive/Boolean HoleActive Nothing ) -> ∀/Data/Primitive/Boolean
            , /operator|| ( EAppArg Value /l -> /Data/Primitive/True = Hole /Data/Primitive/True HoleActive Nothing ) ( EAppArg Value /r -> ∀/Data/Primitive/Boolean = Hole ∀/Data/Primitive/Boolean HoleActive Nothing ) -> /Data/Primitive/True = Value /Data/Primitive/True
            , /operator|| ( EAppArg Value /l -> ∀/Data/Primitive/Boolean = Hole ∀/Data/Primitive/Boolean HoleActive Nothing ) ( EAppArg Value /r -> /Data/Primitive/True = Hole /Data/Primitive/True HoleActive Nothing ) -> /Data/Primitive/True = Value /Data/Primitive/True
            , /operator|| ( EAppArg Value /l -> /Data/Primitive/False = Hole /Data/Primitive/False HoleActive Nothing ) ( EAppArg Value /r -> /Data/Primitive/False = Hole /Data/Primitive/False HoleActive Nothing ) -> /Data/Primitive/False = Value /Data/Primitive/False
            , /operator^ ( EAppArg Value /l -> ∀/Data/Primitive/Boolean = Hole ∀/Data/Primitive/Boolean HoleActive Nothing ) ( EAppArg Value /r -> ∀/Data/Primitive/Boolean = Hole ∀/Data/Primitive/Boolean HoleActive Nothing ) -> ∀/Data/Primitive/Boolean
            , /operator^ ( EAppArg Value /l -> /Data/Primitive/True = Hole /Data/Primitive/True HoleActive Nothing ) ( EAppArg Value /r -> /Data/Primitive/True = Hole /Data/Primitive/True HoleActive Nothing ) -> /Data/Primitive/False = Value /Data/Primitive/False
            , /operator^ ( EAppArg Value /l -> /Data/Primitive/True = Hole /Data/Primitive/True HoleActive Nothing ) ( EAppArg Value /r -> /Data/Primitive/False = Hole /Data/Primitive/False HoleActive Nothing ) -> /Data/Primitive/True = Value /Data/Primitive/True
            , /operator^ ( EAppArg Value /l -> /Data/Primitive/False = Hole /Data/Primitive/False HoleActive Nothing ) ( EAppArg Value /r -> /Data/Primitive/True = Hole /Data/Primitive/True HoleActive Nothing ) -> /Data/Primitive/True = Value /Data/Primitive/True
            , /operator^ ( EAppArg Value /l -> /Data/Primitive/False = Hole /Data/Primitive/False HoleActive Nothing ) ( EAppArg Value /r -> /Data/Primitive/False = Hole /Data/Primitive/False HoleActive Nothing ) -> /Data/Primitive/False = Value /Data/Primitive/False
            , Value /Data/Primitive/Integer
            , Value /Data/Primitive/Float
            , /operator- ( EAppArg Value /a -> /Data/Primitive/Integer = Hole /Data/Primitive/Integer HoleActive Nothing ) -> /Data/Primitive/Integer
            , /operator- ( EAppArg Value /l -> /Data/Primitive/Integer = Hole /Data/Primitive/Integer HoleActive Nothing ) ( EAppArg Value /r -> /Data/Primitive/Integer = Hole /Data/Primitive/Integer HoleActive Nothing ) -> /Data/Primitive/Integer
            , /operator+ ( EAppArg Value /l -> /Data/Primitive/Integer = Hole /Data/Primitive/Integer HoleActive Nothing ) ( EAppArg Value /r -> /Data/Primitive/Integer = Hole /Data/Primitive/Integer HoleActive Nothing ) -> /Data/Primitive/Integer
            , /operator* ( EAppArg Value /l -> /Data/Primitive/Integer = Hole /Data/Primitive/Integer HoleActive Nothing ) ( EAppArg Value /r -> /Data/Primitive/Integer = Hole /Data/Primitive/Integer HoleActive Nothing ) -> /Data/Primitive/Integer
            , /operator<= ( EAppArg Value /l -> /Data/Primitive/Integer = Hole /Data/Primitive/Integer HoleActive Nothing ) ( EAppArg Value /r -> /Data/Primitive/Integer = Hole /Data/Primitive/Integer HoleActive Nothing ) -> ∀/Data/Primitive/Boolean
            , /operator>= ( EAppArg Value /l -> /Data/Primitive/Integer = Hole /Data/Primitive/Integer HoleActive Nothing ) ( EAppArg Value /r -> /Data/Primitive/Integer = Hole /Data/Primitive/Integer HoleActive Nothing ) -> ∀/Data/Primitive/Boolean
            , /operator< ( EAppArg Value /l -> /Data/Primitive/Integer = Hole /Data/Primitive/Integer HoleActive Nothing ) ( EAppArg Value /r -> /Data/Primitive/Integer = Hole /Data/Primitive/Integer HoleActive Nothing ) -> ∀/Data/Primitive/Boolean
            , /operator> ( EAppArg Value /l -> /Data/Primitive/Integer = Hole /Data/Primitive/Integer HoleActive Nothing ) ( EAppArg Value /r -> /Data/Primitive/Integer = Hole /Data/Primitive/Integer HoleActive Nothing ) -> ∀/Data/Primitive/Boolean
            , /operator== ( EAppArg Value /l -> /Data/Primitive/Integer = Hole /Data/Primitive/Integer HoleActive Nothing ) ( EAppArg Value /r -> /Data/Primitive/Integer = Hole /Data/Primitive/Integer HoleActive Nothing ) -> ∀/Data/Primitive/Boolean
            , /operator!= ( EAppArg Value /l -> /Data/Primitive/Integer = Hole /Data/Primitive/Integer HoleActive Nothing ) ( EAppArg Value /r -> /Data/Primitive/Integer = Hole /Data/Primitive/Integer HoleActive Nothing ) -> ∀/Data/Primitive/Boolean
            ]
        ,
            [ CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGType
            , CGClass
                ( False
                , /Data/Primitive/Integer
                , [ /Data/Primitive/Integer ]
                , Just ""
                )
            , CGClass
                ( False
                , /Data/Primitive/Boolean
                ,
                    [ ∀/Data/Primitive/Boolean
                    , ∀/Data/Primitive/Number
                    ]
                , Just " "
                )
            , CGClass
                ( False
                , /Data/Primitive/Integer
                , [ /Data/Primitive/Integer ]
                , Just ""
                )
            , CGClass
                ( False
                , /Data/Primitive/Boolean
                , [ ∀/Data/Primitive/Boolean ]
                , Just ""
                )
            , CGClass
                ( True
                , /Data/Primitive/Boolean
                ,
                    [ /Data/Primitive/True
                    , /Data/Primitive/False
                    ]
                , Just ""
                )
            , CGClass
                ( True
                , /Data/Primitive/Number
                ,
                    [ /Data/Primitive/Integer
                    , /Data/Primitive/Float
                    ]
                , Just ""
                )
            ]
        , []
        )
    , ct
        ( CStr "/repo/dir/stack/core/primitives.ct" )
    ,
        [ ct
            ( CStr "/repo/dir/stack/core/algebra.ct" )
        , ct
            ( CStr "/repo/dir/stack/core/data.ct" )
        ]
    )
,
    (
        (
            [ /Catln/Doc/dshow ( EAppArg Value /s -> ∀/Catln/Doc/DShow ) -> TVArg /s = ( Value /s ↦ TVArg /s )
            , /Catln/Doc/Show/MD ( EAppArg Value /text -> /Data/String )
            , /Catln/Doc/dshow
                ( EAppArg Value /s -> /Catln/#md ( /text=TopType ) = /Catln/#md ( EAppArg Value /text -> ~String ) ) -> /Catln/Doc/Show/MD ( /text=~String ) = /Catln/Doc/Show/MD ( EAppArg Value /text -> TVArg /text = Value /text )
            , /Catln/Doc/dshow
                ( EAppArg Value /s -> /Catln/#print ( /p=TopType ) = /Catln/#print ( EAppArg Value /p ) ) -> TVArg /p = Value /p
            ]
        ,
            [ CGType
            , CGType
            , CGClass
                ( False
                , /Catln/Doc/DShow
                ,
                    [ /Data/String
                    , /Catln/CatlnResult..
                    , /Catln/www..
                    , /Catln/Doc/Show/MD..
                    ]
                , Just "Represents objects which can be shown in the webdocs.    "
                )
            ]
        , []
        )
    , ct
        ( CStr "/repo/dir/stack/core/webdoc.ct" )
    ,
        [ ct
            ( CStr "/repo/dir/stack/core/compile.ct" )
        ]
    )
,
    (
        (
            [ /id ( EAppArg Value /x ) -> TVArg /x = Value /x
            , /ContextIn ( EAppArg Value /value -> /main = Value /main ) ( EAppArg Value /io -> /Catln/IO ) ->
                ( /Catln/exit
                    ( /this=/Catln/IO
                    , /val=/Data/Primitive/Integer
                    ) | /Catln/IO
                ) = /Catln/exit
                ( EAppArg Value /val -> /Data/Primitive/Integer =
                    ( /id
                        ( EAppArg Value /x -> /Data/Primitive/Integer = 0 ) ↦ /Data/Primitive/Integer
                    )
                )
                ( EAppArg Value /this -> TVArg /io = ( Value /io ↦ TVArg /io ) )
            ]
        ,
            [ CGType
            , CGType
            ]
        ,
            [ /Catln/#md
                ( EAppArg Value /text -> /Data/String = "Tests an identity function.
                It requires using the type of the input argument as the output type of id as well.
                So, it must be read as `id($T) -> $T`, not (id(Any) -> Any)." )
            ]
        )
    , ct
        ( CStr "/repo/dir/test/Integration/code/id.ct" )
    ,
        [ dir
            ( CStr "/repo/dir/stack/core" )
        ]
    )
,
    (
        ( []
        , []
        , []
        )
    , dir
        ( CStr "/repo/dir/stack/core" )
    ,
        [ ct
            ( CStr "/repo/dir/stack/core/main.ct" )
        ]
    )
]