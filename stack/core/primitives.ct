import "core/algebra.ct"
import "core/data.ct"


module Data/Primitive
  # # Catln Core Primitives
    These types some of the basic types used in Catln.

  # ## Booleans

  class Boolean = True || False

  every Boolean isa /Data/Algebra/Eq

  (_ :: Boolean == _ :: Boolean) -> Boolean

  (_ :: True == _ :: True)= True

  (_ :: True == _ :: False)= False

  (_ :: False == _ :: True)= False

  (_ :: False == _ :: False)= True

  (~(_ :: Boolean)) -> Boolean

  (~(_ :: True))= False

  (~(_ :: False))= True

  (_ :: Boolean && _ :: Boolean) -> Boolean

  (_ :: True && _ :: True)= True

  (_ :: Boolean && _ :: False)= False

  (_ :: False && _ :: Boolean)= False

  (_ :: Boolean || _ :: Boolean) -> Boolean

  (_ :: True || _ :: Boolean)= True

  (_ :: Boolean || _ :: True)= True

  (_ :: False || _ :: False)= False

  (_ :: Boolean ^ _ :: Boolean) -> Boolean

  (_ :: True ^ _ :: True)= False

  (_ :: True ^ _ :: False)= True

  (_ :: False ^ _ :: True)= True

  (_ :: False ^ _ :: False)= False

  every Boolean isa /Data/Enum

  # enum<Boolean> = [False, True]

  # ## Integers

  class Number = Integer || Float

  every Number isa /Data/Algebra/Eq

  (-(_ :: Integer)) -> Integer

  (_ :: Integer - _ :: Integer) -> Integer

  (_ :: Integer + _ :: Integer) -> Integer

  (_ :: Integer * _ :: Integer) -> Integer

  (_ :: Integer <= _ :: Integer) -> Boolean

  (_ :: Integer >= _ :: Integer) -> Boolean

  (_ :: Integer < _ :: Integer) -> Boolean

  (_ :: Integer > _ :: Integer) -> Boolean

  (_ :: Integer == _ :: Integer) -> Boolean

  (_ :: Integer != _ :: Integer) -> Boolean

  # ### Commutative Group

  every Integer isa /Data/Algebra/CommutativeMonoid

  every Integer isa /Data/Algebra/Group

  # mempty<Integer $T> = 0

  # mappend<Integer $T>($T l, $T r) = l + r

  # inverse<Integer $T>($T t) = -t


